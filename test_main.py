import unittest
from unittest.mock import MagicMock
from telegram import Update, Message, CallbackQuery, User, Contact
from telegram.ext import CallbackContext

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–ª–∞—Å–∏ —Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É –±–æ—Ç–∞
from main import MainCommands, CompanionSearch, CHOOSING, PERSON_COUNT, SEEKING_COMPANION, DEPARTURE, TELEGRAM_ID

# –ö–ª–∞—Å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π Telegram-–±–æ—Ç–∞
class TestTelegramBot(unittest.TestCase):
    def setUp(self):
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫-–æ–±'—î–∫—Ç–∏ –¥–ª—è Update —Ç–∞ CallbackContext
        self.update = MagicMock(spec=Update)
        self.context = MagicMock(spec=CallbackContext)

        # –ú–æ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ callback-–∑–∞–ø–∏—Ç
        self.message = MagicMock(spec=Message)
        self.callback_query = MagicMock(spec=CallbackQuery)

        self.update.message = self.message
        self.update.callback_query = self.callback_query

        # –ú–æ–∫—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram
        self.user = MagicMock(spec=User)
        self.user.id = 123456
        self.update.effective_user = self.user

    # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥–∏ /start
    def test_start_command(self):
        self.message.reply_text = MagicMock()
        result = MainCommands.start(self.update, self.context)
        self.message.reply_text.assert_called_once()
        self.assertEqual(result, -1)  # ConversationHandler.END == -1

    # –¢–µ—Å—Ç –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    def test_choose_command(self):
        self.message.reply_text = MagicMock()
        result = MainCommands.choose(self.update, self.context)
        self.message.reply_text.assert_called_once()
        self.assertEqual(result, CHOOSING)

    # –¢–µ—Å—Ç –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "üîç–®–£–ö–ê–Æ –ü–û–ü–£–¢–ù–ò–ö–êüöó"
    def test_button_option_1(self):
        self.callback_query.data = 'option_1'
        self.callback_query.answer = MagicMock()
        self.callback_query.message.reply_text = MagicMock()

        result = MainCommands.button(self.update, self.context)

        self.callback_query.answer.assert_called_once()
        self.callback_query.message.reply_text.assert_called_once()
        self.assertEqual(result, SEEKING_COMPANION)

    # –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –∑–∞–ø–∏—Ç—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–ø—É—Ç–Ω–∏–∫—ñ–≤
    def test_seeking_companion(self):
        self.message.reply_text = MagicMock()
        self.context.user_data = {}

        result = CompanionSearch.seeking_companion(self.update, self.context)

        self.message.reply_text.assert_called_once()
        self.assertEqual(self.context.user_data['choice'], 'üîç–®–£–ö–ê–Æ –ü–û–ü–£–¢–ù–ò–ö–êüöó')
        self.assertEqual(result, PERSON_COUNT)

    # –¢–µ—Å—Ç –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–ø—É—Ç–Ω–∏–∫—ñ–≤
    def test_person_count(self):
        self.message.text = '3'
        self.message.reply_text = MagicMock()
        self.context.user_data = {}

        result = CompanionSearch.person_count(self.update, self.context)

        self.assertEqual(self.context.user_data['person_count'], '3')
        self.message.reply_text.assert_called_once()
        self.assertEqual(result, DEPARTURE)

    # –¢–µ—Å—Ç –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç
    def test_phone_number_with_contact(self):
        contact = Contact(phone_number='+380123456789', user_id=123456, first_name='Test')
        self.message.contact = contact
        self.message.reply_text = MagicMock()
        self.context.user_data = {}

        result = CompanionSearch.phone_number(self.update, self.context)

        self.assertEqual(self.context.user_data['phone_number'], '+380123456789')
        self.message.reply_text.assert_called_once()
        self.assertEqual(result, TELEGRAM_ID)

    # –¢–µ—Å—Ç –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç—É
    def test_phone_number_without_contact(self):
        self.message.contact = None
        self.message.text = '+380987654321'
        self.message.reply_text = MagicMock()
        self.context.user_data = {}

        result = CompanionSearch.phone_number(self.update, self.context)

        self.assertEqual(self.context.user_data['phone_number'], '+380987654321')
        self.message.reply_text.assert_called_once()

# –ó–∞–ø—É—Å–∫ —É—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
if __name__ == '__main__':
    unittest.main()
